<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.comdosoft.financial.manage.mapper.zhangfu.OutStoreMapper">
<resultMap id="BaseResultMap" type="com.comdosoft.financial.manage.domain.zhangfu.task.OutStore">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="process_user_id" jdbcType="INTEGER" property="processUserId" />
    <result column="process_user_name" jdbcType="VARCHAR" property="processUserName" />
    <result column="statsus" jdbcType="VARCHAR" property="status" />
    <result column="order_id" jdbcType="INTEGER" property="orderId" />
    <result column="created_at" jdbcType="INTEGER" property="createdAt" />
    <result column="updated_at" jdbcType="VARCHAR" property="updatedAt" />
    <result column="cs_apply_id" jdbcType="INTEGER" property="csApplyTypes" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
    <result column="cs_apply_id" jdbcType="INTEGER" property="csApplyTypes" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
  </resultMap>
  
<resultMap id="GoodsMap" type="com.comdosoft.financial.manage.domain.zhangfu.task.Good">
   <id column="id" jdbcType="INTEGER" property="id" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="brandId" jdbcType="INTEGER" property="brandId" />
    <result column="brandName" jdbcType="VARCHAR" property="brandName" />
    <result column="modelNum" jdbcType="VARCHAR" property="modelNum" />
    <result column="urlPath" jdbcType="VARCHAR" property="urlPath" />
    <result column="payChannelId" jdbcType="INTEGER" property="payChannelId" />
    <result column="payChannelName" jdbcType="VARCHAR" property="payChannelName" />
    <result column="quantity" jdbcType="INTEGER" property="quantity" />
  </resultMap>

	<sql id="pageWhere">
		<where>
			1=1
			<if test="status != null"> AND a.status =#{status} </if>
		</where>
	</sql>
	<select id="findPageOutStoresByKeys" resultMap="BaseResultMap">
		select a.id,date_format(a.created_at,'%Y-%c-%d %h:%i:%s') as created_at,a.order_id,a.status,ifnull(a.process_user_id,"") as processUserId from 
		((select * from  cs_out_storages ca where ca.process_user_id = 1 ORDER BY ca.created_at desc)
UNION
(select * from cs_out_storages cb where cb.process_user_id != 1 
 ORDER BY cbcreated_at desc)) a
		<include refid="pageWhere" />
		and a.order_id is not null 
		 order by a.created_at desc limit #{pageRequest.offset}, #{pageRequest.pageSize}
	</select>
	
	<select id="countByKeys" resultType="long">
		SELECT count(a.id) as count
		FROM cs_out_storages a
		<include refid="pageWhere" /> and a.order_id is not null
	</select>
	
	<select id="findOutStoreInfo" resultMap="BaseResultMap">
		SELECT count(a.id) as count
		FROM cs_out_storages a
		<!-- 	<include refid="pageWhere" />-->
	</select>
	
		<select id="getGoodInfoInit" resultMap="GoodsMap">
		select a.pay_channel_id as payChannelId,(select name from pay_channels where id=a.pay_channel_id) as payChannelName,a.quantity,
		b.title,b.model_number as modelNum,b.good_brands_id as brandId,(select name from good_brands where id=b.good_brands_id) as brandName,b.id,
		(select c.url_path from (select good_id,url_path from goods_pictures group by good_id) c where c.good_id=b.id)as urlPath
		 from order_goods a 
		left join goods b on a.good_id=b.id where a.order_id=(select order_id from cs_out_storages where id=#{id})
	</select>
	
	<select id="getAddressInit" resultType="hashmap">
		select a.address from customer_addresses a where a.id=
		(select b.customer_address_id from orders b where b.id=
		(select c.order_id from cs_out_storages c where c.id=#{id} ))
	</select>
	
	<select id="getInfoInit" resultType="hashmap">
select ifnull(c.address,"") as address,ifnull(c.receiver,"") as receiver,ifnull(a.invoice_info,"") as invoiceInfo,
ifnull(a.invoice_type,"") as invoiceType,ifnull(a.comment,"") as comment,ifnull(a.types,"") as types,ifnull(a.order_number,"") as orderNumber,
ifnull(b.name,"") as name,ifnull(a.payed_at,"") as payedAt,ifnull(d.pay_type,"") as payType,f.name as payTypeName, 
ifnull((select name from factories where id=(select factory_id from goods where id=(select good_id from order_goods where order_id=1))),'掌富') as factoryName,
ifnull(a.process_user_name,"") as processUserName,
ifnull(a.total_price,"") as oldPrice,ifnull(a.actual_price,"") as actualPrice from orders a left join customers b on a.customer_id=b.id
left join customer_addresses c on a.customer_address_id=c.id 
left join order_payments d on a.id=d.order_id
left join order_goods e on e.order_id =a.id
left join pay_channels f on d.pay_type=f.id
where a.id=#{orderId}
	</select>
	
	<select id="getOrderIdByOutStorageId" resultType="hashmap">
		select order_id as orderId from cs_out_storages where id=#{id}
	</select>
	
	
	<insert id="saveWLInfo" useGeneratedKeys="true">
		insert into order_logistics(order_id,logistics_name,logistics_number,created_at,updated_at)
		values(#{orderId},#{wlCompany},#{wlNum},now(),now())
   </insert>
	
   <insert id="saveTerminalNum" useGeneratedKeys="true" keyProperty="id">
		insert into in_out_storages(order_id,good_id,terminal_number,created_at,created_user_id) 
		values(#{orderId},#{goodId},#{port},now(),#{loginId})
   </insert>
   
   <select id="getTerminalNum" resultType="hashmap">
		select terminal_number as num,good_id as goodId from in_out_storages where order_id=#{orderId} and good_id=#{goodId}
	</select>
   
   <select id="getOperater" resultType="String">
		select a.name from customers a left join in_out_storages b on a.id=b.created_user_id
			where b.order_id=#{orderId} group by b.order_id
	</select>
   
   <select id="getRemarks" resultType="hashmap">
		select a.content,b.name as userName,a.created_at as operateTime from  cs_out_storage_marks a left join customers b on a.customer_id = b.id where a.cs_out_storage_id=#{id} order by a.created_at desc
	</select>
   
	<select id="getWLByOrderId" resultType="hashmap">
		select logistics_name as wlName,logistics_number as wlNum,id from order_logistics where order_id=#{orderId}
	</select>
	
	<update id="changeStatus">
		update cs_out_storages set status=#{status},updated_at=now() where id=#{id}
	</update>
	
	<update id="saveProcessUser">
		update cs_out_storages set process_user_id=#{processUserId},process_user_name=#{processUserName},updated_at=now() where id=#{id}
	</update>
	
	<insert id="saveRemark" useGeneratedKeys="true" keyProperty="id">
		insert into cs_out_storage_marks(cs_out_storage_id,customer_id,content,created_at) 
		values(#{id},#{loginId},#{content},now())
   </insert>
</mapper>
